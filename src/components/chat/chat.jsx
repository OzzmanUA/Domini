import React, { useState, useEffect } from 'react';
import './chat-style.css';
import chatData from './chatData.json';
import avatar1 from './images/demo_user_1.png';

const Chat = () => {
    const [messages, setMessages] = useState([]);
    const [selectedChat, setSelectedChat] = useState(0);
    const [newMessage, setNewMessage] = useState('');
    const [searchTerm, setSearchTerm] = useState(''); // –î–ª—è –ø–æ–∏—Å–∫–∞ —á–∞—Ç–æ–≤
    const [filteredChats, setFilteredChats] = useState([]); // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Ç—ã

    useEffect(() => {
        setMessages(chatData);
        setFilteredChats(chatData); // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—Å–µ —á–∞—Ç—ã
    }, []);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
    const handleUserSelect = (index) => {
        setSelectedChat(index);
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const handleSendMessage = () => {
        if (newMessage.trim()) {
            const updatedMessages = [...messages];
            updatedMessages[selectedChat].messages.push({
                text: newMessage,
                time: new Date().toLocaleTimeString().slice(0, 5),
                isUser: true,
            });
            setMessages(updatedMessages);
            setNewMessage('');
        }
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ (—Ñ—É–Ω–∫—Ü–∏—è-–∑–∞–≥–ª—É—à–∫–∞)
    const handleSendFile = (e) => {
        const file = e.target.files[0];
        if (file) {
            const updatedMessages = [...messages];
            updatedMessages[selectedChat].messages.push({
                text: `–§–∞–π–ª: ${file.name}`,
                time: new Date().toLocaleTimeString().slice(0, 5),
                isUser: true,
            });
            setMessages(updatedMessages);
        }
    };

    // –ü–æ–∏—Å–∫ —á–∞—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏
    const handleSearch = (e) => {
        const search = e.target.value.toLowerCase();
        setSearchTerm(search);
        const filtered = messages.filter((chat) =>
            chat.name.toLowerCase().includes(search)
        );
        setFilteredChats(filtered);
    };

    return (
        <div className="chat-container">
            {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —á–∞—Ç–æ–º */}
            <div className="sidebar">
                <input
                    type="text"
                    placeholder="–ü–æ—à—É–∫"
                    className="search-input"
                    value={searchTerm}
                    onChange={handleSearch} // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
                />
                <ul>
                    {filteredChats.map((chat, index) => (
                        <li key={index} onClick={() => handleUserSelect(index)}>
                            <img src={avatar1} alt={chat.name} className="avatar" />
                            <div className="user-info">
                                <p className="user-name">{chat.name}</p>
                                <p className="user-last-message">{chat.lastMessage}</p>
                            </div>
                        </li>
                    ))}
                </ul>
            </div>

            {/* –û–∫–Ω–æ —á–∞—Ç–∞ */}
            {messages[selectedChat] && (
                <div className="chat-window">
                    <div className="chat-header">
                        <img
                            src={avatar1}
                            alt={messages[selectedChat].name}
                            className="avatar"
                        />
                        <h2>{messages[selectedChat].name}</h2>
                    </div>
                    <div className="chat-messages">
                        {messages[selectedChat].messages.map((message, index) => (
                            <div
                                key={index}
                                className={`message ${
                                    message.isUser ? 'user-message' : 'contact-message'
                                }`}
                            >
                                <p>{message.text}</p>
                                <span className="message-time">{message.time}</span>
                            </div>
                        ))}
                    </div>

                    {/* –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∏ —Å–º–∞–π–ª–∏–∫–æ–≤ */}
                    <div className="chat-input">
                        <input
                            type="text"
                            placeholder="–ù–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                        />
                        <input
                            type="file"
                            id="fileInput"
                            style={{ display: 'none' }}
                            onChange={handleSendFile}
                        />
                        <button
                            onClick={() => document.getElementById('fileInput').click()}
                        >
                            üìé –§–∞–π–ª
                        </button>
                        <button onClick={() => setNewMessage(newMessage + 'üòä')}>
                            üòÄ –°–º–∞–π–ª–∏–∫–∏
                        </button>
                        <button onClick={handleSendMessage}>–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏</button>
                    </div>
                </div>
            )}

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ */}
            {messages[selectedChat] && (
                <div className="order-info">
                    <h3>–ü—Ä–æ {messages[selectedChat].name}</h3>
                    <p>{messages[selectedChat].about}</p>
                    <div className="deadline">
                        <p>–ö—Ä–∞–π–Ω—ñ–π —Ç–µ—Ä–º—ñ–Ω:</p>
                        <p>
                            {messages[selectedChat].deadline.day} /{' '}
                            {messages[selectedChat].deadline.month} /{' '}
                            {messages[selectedChat].deadline.year} –æ{' '}
                            {messages[selectedChat].deadline.time}
                        </p>
                    </div>
                </div>
            )}
        </div>
    );
};

export default Chat;
